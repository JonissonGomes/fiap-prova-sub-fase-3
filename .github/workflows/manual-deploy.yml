name: Manual Deploy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
      force_deploy:
        description: 'Force deploy even if tests fail'
        required: false
        default: false
        type: boolean
      skip_tests:
        description: 'Skip running tests entirely'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  test-backend:
    name: Test Backend Services
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: ${{ !inputs.skip_tests }}
    continue-on-error: ${{ inputs.force_deploy }}
    
    strategy:
      matrix:
        service: [auth-service, core-service, customer-service, sales-service]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.service }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.service }}-
          
    - name: Install dependencies
      run: |
        cd ${{ matrix.service }}
        if [ -f requirements-dev.txt ]; then
          pip install -r requirements-dev.txt
        else
          pip install -r requirements.txt
        fi
        
    - name: Run tests with coverage
      id: run-tests
      run: |
        cd ${{ matrix.service }}
        if [ -d "tests" ]; then
          echo "Running tests for ${{ matrix.service }}..."
          if coverage run -m pytest tests/ -v --tb=short; then
            echo "✅ Tests passed for ${{ matrix.service }}"
            echo "test_status=passed" >> $GITHUB_OUTPUT
          else
            echo "❌ Tests failed for ${{ matrix.service }}"
            echo "test_status=failed" >> $GITHUB_OUTPUT
          fi
          coverage report --show-missing
          coverage xml
        else
          echo "No tests directory found for ${{ matrix.service }}"
          echo "test_status=no-tests" >> $GITHUB_OUTPUT
        fi
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ${{ matrix.service }}/coverage.xml
        flags: ${{ matrix.service }}
        name: ${{ matrix.service }}-coverage
        fail_ci_if_error: false
        
    - name: Test Status Summary
      if: always()
      run: |
        echo "## Test Status for ${{ matrix.service }}" >> $GITHUB_STEP_SUMMARY
        echo "- Status: ${{ steps.run-tests.outputs.test_status }}" >> $GITHUB_STEP_SUMMARY
        echo "- Service: ${{ matrix.service }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: ${{ !inputs.skip_tests }}
    continue-on-error: ${{ inputs.force_deploy }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Run linting
      id: run-lint
      run: |
        cd frontend
        if npm run lint; then
          echo "✅ Linting passed"
          echo "lint_status=passed" >> $GITHUB_OUTPUT
        else
          echo "❌ Linting failed but continuing..."
          echo "lint_status=failed" >> $GITHUB_OUTPUT
        fi
        
    - name: Run tests
      id: run-tests
      run: |
        cd frontend
        if npm test -- --coverage --watchAll=false --passWithNoTests; then
          echo "✅ Frontend tests passed"
          echo "test_status=passed" >> $GITHUB_OUTPUT
        else
          echo "❌ Frontend tests failed but continuing..."
          echo "test_status=failed" >> $GITHUB_OUTPUT
        fi
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: always()
      with:
        file: frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage
        fail_ci_if_error: false
        
    - name: Frontend Status Summary
      if: always()
      run: |
        echo "## Frontend Test Status" >> $GITHUB_STEP_SUMMARY
        echo "- Linting: ${{ steps.run-lint.outputs.lint_status }}" >> $GITHUB_STEP_SUMMARY
        echo "- Tests: ${{ steps.run-tests.outputs.test_status }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

  build-and-deploy:
    name: Build and Deploy to ${{ inputs.environment }}
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    timeout-minutes: 45
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check test results
      id: check-tests
      run: |
        echo "Checking test results from previous jobs..."
        
        if [ "${{ inputs.skip_tests }}" == "true" ]; then
          echo "✅ Tests skipped - proceeding with deployment"
          echo "deploy_reason=tests_skipped" >> $GITHUB_OUTPUT
        elif [ "${{ inputs.force_deploy }}" == "true" ]; then
          echo "⚠️ Force deploy enabled - proceeding despite test results"
          echo "deploy_reason=force_deploy" >> $GITHUB_OUTPUT
        elif [ "${{ needs.test-backend.result }}" == "success" ] && [ "${{ needs.test-frontend.result }}" == "success" ]; then
          echo "✅ All tests passed - proceeding with deployment"
          echo "deploy_reason=all_tests_passed" >> $GITHUB_OUTPUT
        else
          echo "❌ Tests failed and force deploy not enabled"
          echo "deploy_reason=tests_failed" >> $GITHUB_OUTPUT
          exit 1
        fi
        
        echo "test_backend_status=${{ needs.test-backend.result }}" >> $GITHUB_OUTPUT
        echo "test_frontend_status=${{ needs.test-frontend.result }}" >> $GITHUB_OUTPUT
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Build and push Docker images
      run: |
        echo "Building and pushing Docker images for ${{ inputs.environment }}..."
        
        # Build auth-service
        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/fiap-auth-service:${{ inputs.environment }} auth-service/
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/fiap-auth-service:${{ inputs.environment }}
        
        # Build core-service
        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/fiap-core-service:${{ inputs.environment }} core-service/
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/fiap-core-service:${{ inputs.environment }}
        
        # Build customer-service
        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/fiap-customer-service:${{ inputs.environment }} customer-service/
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/fiap-customer-service:${{ inputs.environment }}
        
        # Build payment-service
        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/fiap-payment-service:${{ inputs.environment }} payment-service/
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/fiap-payment-service:${{ inputs.environment }}
        
        # Build sales-service
        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/fiap-sales-service:${{ inputs.environment }} sales-service/
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/fiap-sales-service:${{ inputs.environment }}
        
        # Build frontend
        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/fiap-frontend:${{ inputs.environment }} frontend/
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/fiap-frontend:${{ inputs.environment }}
        
    - name: Deploy to Render
      uses: johnbeynon/render-deploy-action@v1.0.0
      with:
        service-id: ${{ secrets.RENDER_SERVICE_ID }}
        api-key: ${{ secrets.RENDER_API_KEY }}
        
    - name: Deployment Summary
      if: always()
      run: |
        echo "## Manual Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "### Environment" >> $GITHUB_STEP_SUMMARY
        echo "- Target: ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
        echo "- Force Deploy: ${{ inputs.force_deploy }}" >> $GITHUB_STEP_SUMMARY
        echo "- Skip Tests: ${{ inputs.skip_tests }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ inputs.skip_tests }}" != "true" ]; then
          echo "### Test Results" >> $GITHUB_STEP_SUMMARY
          echo "- Backend Tests: ${{ steps.check-tests.outputs.test_backend_status }}" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend Tests: ${{ steps.check-tests.outputs.test_frontend_status }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "### Deployment Reason" >> $GITHUB_STEP_SUMMARY
        echo "- Reason: ${{ steps.check-tests.outputs.deploy_reason }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ job.status }}" == "success" ]; then
          echo "### Status: ✅ Deployment successful!" >> $GITHUB_STEP_SUMMARY
        else
          echo "### Status: ❌ Deployment failed!" >> $GITHUB_STEP_SUMMARY
        fi 