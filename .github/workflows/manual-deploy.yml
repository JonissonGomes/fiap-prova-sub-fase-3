name: Manual Deploy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
      force_deploy:
        description: 'Force deploy even if tests fail'
        required: false
        default: false
        type: boolean
      skip_tests:
        description: 'Skip running tests entirely'
        required: false
        default: false
        type: boolean
      deploy_backend_only:
        description: 'Deploy only backend service'
        required: false
        default: false
        type: boolean
      deploy_frontend_only:
        description: 'Deploy only frontend service'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'
  MONGODB_URI: 'mongodb://localhost:27017/fiap-test'
  JWT_SECRET: 'test-secret-key'

jobs:
  test-backend:
    name: Test Backend (Node.js)
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: ${{ !inputs.skip_tests }}
    continue-on-error: ${{ inputs.force_deploy }}
    
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: --health-cmd mongosh --health-interval 10s --health-timeout 5s --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
        
    - name: Install backend dependencies
      run: |
        cd backend
        npm ci
        
    - name: Run linting
      id: run-lint
      run: |
        cd backend
        if npm run lint 2>/dev/null || echo "No lint script found"; then
          echo "✅ Backend linting passed"
          echo "lint_status=passed" >> $GITHUB_OUTPUT
        else
          echo "❌ Backend linting failed but continuing..."
          echo "lint_status=failed" >> $GITHUB_OUTPUT
        fi
        
    - name: Run backend tests
      id: run-tests
      run: |
        cd backend
        if [ -d "tests" ] || [ -f "test" ]; then
          echo "Running backend tests..."
          if npm test 2>/dev/null || echo "No tests found - creating placeholder"; then
            echo "✅ Backend tests passed"
            echo "test_status=passed" >> $GITHUB_OUTPUT
          else
            echo "❌ Backend tests failed but continuing..."
            echo "test_status=failed" >> $GITHUB_OUTPUT
          fi
        else
          echo "No tests directory found for backend"
          echo "test_status=no-tests" >> $GITHUB_OUTPUT
        fi
        
    - name: Backend Status Summary
      if: always()
      run: |
        echo "## Backend Test Status" >> $GITHUB_STEP_SUMMARY
        echo "- Linting: ${{ steps.run-lint.outputs.lint_status }}" >> $GITHUB_STEP_SUMMARY
        echo "- Tests: ${{ steps.run-tests.outputs.test_status }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: ${{ !inputs.skip_tests }}
    continue-on-error: ${{ inputs.force_deploy }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Run linting
      id: run-lint
      run: |
        cd frontend
        if npm run lint; then
          echo "✅ Linting passed"
          echo "lint_status=passed" >> $GITHUB_OUTPUT
        else
          echo "❌ Linting failed but continuing..."
          echo "lint_status=failed" >> $GITHUB_OUTPUT
        fi
        
    - name: Run tests
      id: run-tests
      run: |
        cd frontend
        if npm test -- --coverage --watchAll=false --passWithNoTests; then
          echo "✅ Frontend tests passed"
          echo "test_status=passed" >> $GITHUB_OUTPUT
        else
          echo "❌ Frontend tests failed but continuing..."
          echo "test_status=failed" >> $GITHUB_OUTPUT
        fi
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: always()
      with:
        file: frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage
        fail_ci_if_error: false
        
    - name: Frontend Status Summary
      if: always()
      run: |
        echo "## Frontend Test Status" >> $GITHUB_STEP_SUMMARY
        echo "- Linting: ${{ steps.run-lint.outputs.lint_status }}" >> $GITHUB_STEP_SUMMARY
        echo "- Tests: ${{ steps.run-tests.outputs.test_status }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

  build-and-deploy:
    name: Build and Deploy to ${{ inputs.environment }}
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    timeout-minutes: 45
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: |
          backend/package-lock.json
          frontend/package-lock.json
      
    - name: Check test results
      id: check-tests
      run: |
        echo "Checking test results from previous jobs..."
        
        if [ "${{ inputs.skip_tests }}" == "true" ]; then
          echo "✅ Tests skipped - proceeding with deployment"
          echo "deploy_reason=tests_skipped" >> $GITHUB_OUTPUT
        elif [ "${{ inputs.force_deploy }}" == "true" ]; then
          echo "⚠️ Force deploy enabled - proceeding despite test results"
          echo "deploy_reason=force_deploy" >> $GITHUB_OUTPUT
        elif [ "${{ needs.test-backend.result }}" == "success" ] && [ "${{ needs.test-frontend.result }}" == "success" ]; then
          echo "✅ All tests passed - proceeding with deployment"
          echo "deploy_reason=all_tests_passed" >> $GITHUB_OUTPUT
        else
          echo "❌ Tests failed and force deploy not enabled"
          echo "deploy_reason=tests_failed" >> $GITHUB_OUTPUT
          exit 1
        fi
        
        echo "test_backend_status=${{ needs.test-backend.result }}" >> $GITHUB_OUTPUT
        echo "test_frontend_status=${{ needs.test-frontend.result }}" >> $GITHUB_OUTPUT
        
    - name: Build backend
      if: ${{ !inputs.deploy_frontend_only }}
      run: |
        echo "Building backend for ${{ inputs.environment }}..."
        cd backend
        npm ci --production
        
    - name: Build frontend
      if: ${{ !inputs.deploy_backend_only }}
      run: |
        echo "Building frontend for ${{ inputs.environment }}..."
        cd frontend
        npm ci
        npm run build
        
    - name: Deploy Backend to Render
      if: ${{ !inputs.deploy_frontend_only }}
      run: |
        echo "Deploying Backend to Render (${{ inputs.environment }})..."
        
        SERVICE_ID="${{ inputs.environment == 'production' && secrets.RENDER_BACKEND_SERVICE_ID || secrets.RENDER_BACKEND_STAGING_SERVICE_ID }}"
        
        curl -X POST "https://api.render.com/v1/services/${SERVICE_ID}/deploys" \
          -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
          -H "Content-Type: application/json" \
          -d '{
            "clearCache": "do_not_clear"
          }'
        
        echo "Backend deploy triggered successfully!"
        
    - name: Deploy Frontend to Render
      if: ${{ !inputs.deploy_backend_only }}
      run: |
        echo "Deploying Frontend to Render (${{ inputs.environment }})..."
        
        SERVICE_ID="${{ inputs.environment == 'production' && secrets.RENDER_FRONTEND_SERVICE_ID || secrets.RENDER_FRONTEND_STAGING_SERVICE_ID }}"
        
        curl -X POST "https://api.render.com/v1/services/${SERVICE_ID}/deploys" \
          -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
          -H "Content-Type: application/json" \
          -d '{
            "clearCache": "do_not_clear"
          }'
        
        echo "Frontend deploy triggered successfully!"
        
    - name: Wait for deployment status
      run: |
        echo "Waiting for deployments to complete..."
        sleep 30
        echo "Deployments should be processing..."
        
    - name: Deployment Summary
      if: always()
      run: |
        echo "## Manual Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "### Configuration" >> $GITHUB_STEP_SUMMARY
        echo "- Environment: ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
        echo "- Force Deploy: ${{ inputs.force_deploy }}" >> $GITHUB_STEP_SUMMARY
        echo "- Skip Tests: ${{ inputs.skip_tests }}" >> $GITHUB_STEP_SUMMARY
        echo "- Backend Only: ${{ inputs.deploy_backend_only }}" >> $GITHUB_STEP_SUMMARY
        echo "- Frontend Only: ${{ inputs.deploy_frontend_only }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### Architecture" >> $GITHUB_STEP_SUMMARY
        echo "- Backend: Node.js/Express unified service" >> $GITHUB_STEP_SUMMARY
        echo "- Frontend: React TypeScript application" >> $GITHUB_STEP_SUMMARY
        echo "- Database: MongoDB (external)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ inputs.skip_tests }}" != "true" ]; then
          echo "### Test Results" >> $GITHUB_STEP_SUMMARY
          echo "- Backend Tests: ${{ steps.check-tests.outputs.test_backend_status }}" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend Tests: ${{ steps.check-tests.outputs.test_frontend_status }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "### Deployment Reason" >> $GITHUB_STEP_SUMMARY
        echo "- Reason: ${{ steps.check-tests.outputs.deploy_reason }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ job.status }}" == "success" ]; then
          echo "### Status: ✅ Deployment successful!" >> $GITHUB_STEP_SUMMARY
          if [ "${{ inputs.deploy_backend_only }}" != "true" ]; then
            echo "- Frontend deployed to Render" >> $GITHUB_STEP_SUMMARY
          fi
          if [ "${{ inputs.deploy_frontend_only }}" != "true" ]; then
            echo "- Backend deployed to Render" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "### Status: ❌ Deployment failed!" >> $GITHUB_STEP_SUMMARY
        fi 