# üöó FIAP III de Ve√≠culos - Makefile
# Facilita o setup, execu√ß√£o e gerenciamento do projeto

# Cores para output
RED=\033[0;31m
GREEN=\033[0;32m
YELLOW=\033[1;33m
BLUE=\033[0;34m
PURPLE=\033[0;35m
CYAN=\033[0;36m
WHITE=\033[1;37m
NC=\033[0m # No Color

# Vari√°veis
BACKEND_DIR=backend
FRONTEND_DIR=frontend
MONGODB_CONTAINER=mongodb-unified-dev
BACKEND_PORT=3002
FRONTEND_PORT=3000
MONGODB_PORT=27017

# Comandos padr√£o
.PHONY: help install setup start stop clean test logs status

# Ajuda - comando padr√£o
help: ## üìñ Mostra esta ajuda
	@echo "$(CYAN)üöó FIAP III de Ve√≠culos$(NC)"
	@echo "$(YELLOW)================================$(NC)"
	@echo ""
	@echo "$(WHITE)Comandos dispon√≠veis:$(NC)"
	@echo ""
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "  $(GREEN)%-20s$(NC) %s\n", $$1, $$2}' $(MAKEFILE_LIST)
	@echo ""
	@echo "$(YELLOW)Exemplos:$(NC)"
	@echo "  make setup     # Setup completo do projeto"
	@echo "  make start     # Iniciar backend e frontend"
	@echo "  make stop      # Parar todos os servi√ßos"
	@echo "  make logs      # Ver logs em tempo real"

# Instala√ß√£o de depend√™ncias
install: ## üì¶ Instalar depend√™ncias do backend e frontend
	@echo "$(BLUE)üì¶ Instalando depend√™ncias...$(NC)"
	@echo "$(YELLOW)Backend:$(NC)"
	@cd $(BACKEND_DIR) && npm install
	@echo "$(YELLOW)Frontend:$(NC)"
	@cd $(FRONTEND_DIR) && npm install
	@echo "$(GREEN)‚úÖ Depend√™ncias instaladas!$(NC)"

# Setup completo do projeto
setup: install mongodb populate ## üöÄ Setup completo do projeto
	@echo "$(GREEN)üéâ Setup completo realizado!$(NC)"
	@echo "$(WHITE)Para iniciar o sistema, execute:$(NC)"
	@echo "  $(CYAN)make start$(NC)"

# Configura√ß√£o do MongoDB
mongodb: ## üóÑÔ∏è Iniciar MongoDB com Docker
	@echo "$(BLUE)üóÑÔ∏è Configurando MongoDB...$(NC)"
	@if docker ps -q -f name=$(MONGODB_CONTAINER) | grep -q .; then \
		echo "$(YELLOW)MongoDB j√° est√° rodando$(NC)"; \
	else \
		echo "$(YELLOW)Iniciando MongoDB...$(NC)"; \
		docker run -d --name $(MONGODB_CONTAINER) -p $(MONGODB_PORT):27017 mongo:latest --noauth; \
		sleep 3; \
		echo "$(GREEN)‚úÖ MongoDB iniciado!$(NC)"; \
	fi

# Popular dados iniciais
populate: ## üå± Popular banco com dados iniciais
	@echo "$(BLUE)üå± Populando dados iniciais...$(NC)"
	@cd $(BACKEND_DIR) && npm run populate
	@echo "$(GREEN)‚úÖ Dados populados!$(NC)"

# Iniciar todos os servi√ßos
start: ## üöÄ Iniciar backend e frontend
	@echo "$(BLUE)üöÄ Iniciando sistema...$(NC)"
	@echo "$(YELLOW)Backend: http://localhost:$(BACKEND_PORT)$(NC)"
	@echo "$(YELLOW)Frontend: http://localhost:$(FRONTEND_PORT)$(NC)"
	@echo ""
	@echo "$(WHITE)Pressione Ctrl+C para parar$(NC)"
	@echo ""
	@$(MAKE) start-backend & $(MAKE) start-frontend & wait

# Iniciar apenas o backend
start-backend: ## üîß Iniciar apenas o backend
	@echo "$(BLUE)üîß Iniciando backend...$(NC)"
	@cd $(BACKEND_DIR) && npm start

# Iniciar apenas o frontend
start-frontend: ## üé® Iniciar apenas o frontend
	@echo "$(BLUE)üé® Iniciando frontend...$(NC)"
	@cd $(FRONTEND_DIR) && npm start

# Parar todos os servi√ßos
stop: ## üõë Parar todos os servi√ßos
	@echo "$(RED)üõë Parando servi√ßos...$(NC)"
	@pkill -f "node.*server.js" || true
	@pkill -f "react-scripts" || true
	@echo "$(GREEN)‚úÖ Servi√ßos parados!$(NC)"

# Parar MongoDB
stop-mongodb: ## üõë Parar MongoDB
	@echo "$(RED)üõë Parando MongoDB...$(NC)"
	@docker stop $(MONGODB_CONTAINER) || true
	@docker rm $(MONGODB_CONTAINER) || true
	@echo "$(GREEN)‚úÖ MongoDB parado!$(NC)"

# Limpeza completa
clean: stop stop-mongodb ## üßπ Limpeza completa
	@echo "$(RED)üßπ Limpando projeto...$(NC)"
	@cd $(BACKEND_DIR) && rm -rf node_modules package-lock.json
	@cd $(FRONTEND_DIR) && rm -rf node_modules package-lock.json build
	@echo "$(GREEN)‚úÖ Limpeza conclu√≠da!$(NC)"

# Testes
test: ## üß™ Executar testes
	@echo "$(BLUE)üß™ Executando testes...$(NC)"
	@echo "$(YELLOW)Backend:$(NC)"
	@cd $(BACKEND_DIR) && npm test || echo "$(YELLOW)Testes do backend n√£o configurados$(NC)"
	@echo "$(YELLOW)Frontend:$(NC)"
	@cd $(FRONTEND_DIR) && npm test || echo "$(YELLOW)Testes do frontend n√£o configurados$(NC)"

# Logs em tempo real
logs: ## üìã Ver logs em tempo real
	@echo "$(BLUE)üìã Logs do sistema...$(NC)"
	@echo "$(WHITE)Pressione Ctrl+C para sair$(NC)"
	@echo ""
	@tail -f $(BACKEND_DIR)/logs/*.log 2>/dev/null || echo "$(YELLOW)Logs n√£o encontrados$(NC)"

# Status dos servi√ßos
status: ## üìä Status dos servi√ßos
	@echo "$(BLUE)üìä Status dos servi√ßos:$(NC)"
	@echo ""
	@echo "$(YELLOW)MongoDB:$(NC)"
	@if docker ps -q -f name=$(MONGODB_CONTAINER) | grep -q .; then \
		echo "  $(GREEN)‚úÖ Rodando$(NC)"; \
	else \
		echo "  $(RED)‚ùå Parado$(NC)"; \
	fi
	@echo ""
	@echo "$(YELLOW)Backend:$(NC)"
	@if pgrep -f "node.*server.js" > /dev/null; then \
		echo "  $(GREEN)‚úÖ Rodando na porta $(BACKEND_PORT)$(NC)"; \
	else \
		echo "  $(RED)‚ùå Parado$(NC)"; \
	fi
	@echo ""
	@echo "$(YELLOW)Frontend:$(NC)"
	@if pgrep -f "react-scripts" > /dev/null; then \
		echo "  $(GREEN)‚úÖ Rodando na porta $(FRONTEND_PORT)$(NC)"; \
	else \
		echo "  $(RED)‚ùå Parado$(NC)"; \
	fi

# Health check
health: ## üè• Verificar sa√∫de dos servi√ßos
	@echo "$(BLUE)üè• Verificando sa√∫de dos servi√ßos...$(NC)"
	@echo ""
	@echo "$(YELLOW)API Health Check:$(NC)"
	@curl -s http://localhost:$(BACKEND_PORT)/health | jq . || echo "$(RED)‚ùå API n√£o est√° respondendo$(NC)"
	@echo ""
	@echo "$(YELLOW)Frontend:$(NC)"
	@curl -s -o /dev/null -w "%{http_code}" http://localhost:$(FRONTEND_PORT) | grep -q "200" && echo "$(GREEN)‚úÖ Frontend OK$(NC)" || echo "$(RED)‚ùå Frontend n√£o est√° respondendo$(NC)"

# Build para produ√ß√£o
build: ## üèóÔ∏è Build para produ√ß√£o
	@echo "$(BLUE)üèóÔ∏è Build para produ√ß√£o...$(NC)"
	@cd $(FRONTEND_DIR) && npm run build
	@echo "$(GREEN)‚úÖ Build conclu√≠do!$(NC)"

# Deploy local
deploy: build ## üöÄ Deploy local
	@echo "$(BLUE)üöÄ Deploy local...$(NC)"
	@$(MAKE) start-backend
	@echo "$(GREEN)‚úÖ Deploy conclu√≠do!$(NC)"

# Reset completo
reset: clean setup ## üîÑ Reset completo do projeto
	@echo "$(GREEN)üîÑ Reset completo realizado!$(NC)"

# Desenvolvimento
dev: ## üíª Modo desenvolvimento (backend + frontend)
	@echo "$(BLUE)üíª Iniciando modo desenvolvimento...$(NC)"
	@echo "$(YELLOW)Backend: http://localhost:$(BACKEND_PORT)$(NC)"
	@echo "$(YELLOW)Frontend: http://localhost:$(FRONTEND_PORT)$(NC)"
	@echo ""
	@$(MAKE) start

# Produ√ß√£o
prod: build ## üè≠ Modo produ√ß√£o
	@echo "$(BLUE)üè≠ Iniciando modo produ√ß√£o...$(NC)"
	@NODE_ENV=production $(MAKE) start-backend

# Backup do banco
backup: ## üíæ Backup do banco de dados
	@echo "$(BLUE)üíæ Fazendo backup do banco...$(NC)"
	@mkdir -p backups
	@docker exec $(MONGODB_CONTAINER) mongodump --db vehicle_sales --out /tmp/backup
	@docker cp $(MONGODB_CONTAINER):/tmp/backup ./backups/backup-$(shell date +%Y%m%d-%H%M%S)
	@echo "$(GREEN)‚úÖ Backup conclu√≠do!$(NC)"

# Restaurar backup
restore: ## üîÑ Restaurar backup do banco
	@echo "$(BLUE)üîÑ Restaurando backup...$(NC)"
	@echo "$(YELLOW)Backups dispon√≠veis:$(NC)"
	@ls -la backups/ 2>/dev/null || echo "$(RED)Nenhum backup encontrado$(NC)"

# Informa√ß√µes do projeto
info: ## ‚ÑπÔ∏è Informa√ß√µes do projeto
	@echo "$(CYAN)üöó FIAP III de Ve√≠culos$(NC)"
	@echo "$(YELLOW)================================$(NC)"
	@echo ""
	@echo "$(WHITE)Vers√µes:$(NC)"
	@echo "  Node.js: $(shell node --version 2>/dev/null || echo 'N√£o instalado')"
	@echo "  npm: $(shell npm --version 2>/dev/null || echo 'N√£o instalado')"
	@echo "  Docker: $(shell docker --version 2>/dev/null || echo 'N√£o instalado')"
	@echo ""
	@echo "$(WHITE)Portas:$(NC)"
	@echo "  Backend: $(BACKEND_PORT)"
	@echo "  Frontend: $(FRONTEND_PORT)"
	@echo "  MongoDB: $(MONGODB_PORT)"
	@echo ""
	@echo "$(WHITE)Credenciais padr√£o:$(NC)"
	@echo "  Email: admin@vehiclesales.com"
	@echo "  Senha: admin123"

# Comando padr√£o
.DEFAULT_GOAL := help
