version: '3.8'

services:
  # MongoDB para Auth Service
  auth-mongodb:
    image: mongo:latest
    container_name: fiap-auth-mongodb
    restart: unless-stopped
    ports:
      - "27021:27017"
    volumes:
      - auth-mongodb-data:/data/db
    networks:
      - fiap-network

  # MongoDB para Core Service
  core-mongodb:
    image: mongo:latest
    container_name: fiap-core-mongodb
    restart: unless-stopped
    ports:
      - "27019:27017"
    volumes:
      - core-mongodb-data:/data/db
    networks:
      - fiap-network

  # MongoDB para Sales Service
  sales-mongodb:
    image: mongo:latest
    container_name: fiap-sales-mongodb
    restart: unless-stopped
    ports:
      - "27020:27017"
    volumes:
      - sales-mongodb-data:/data/db
    networks:
      - fiap-network

  # MongoDB para Customer Service
  customer-mongodb:
    image: mongo:latest
    container_name: fiap-customer-mongodb
    restart: unless-stopped
    ports:
      - "27022:27017"
    volumes:
      - customer-mongodb-data:/data/db
    networks:
      - fiap-network

  # MongoDB para Payment Service
  payment-mongodb:
    image: mongo:latest
    container_name: fiap-payment-mongodb
    restart: unless-stopped
    ports:
      - "27023:27017"
    volumes:
      - payment-mongodb-data:/data/db
    networks:
      - fiap-network

  # Keycloak
  keycloak:
    image: quay.io/keycloak/keycloak:23.0
    container_name: fiap-keycloak
    restart: unless-stopped
    environment:
      - KEYCLOAK_ADMIN=${KEYCLOAK_ADMIN}
      - KEYCLOAK_ADMIN_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD}
      - KC_DB=${KC_DB}
    ports:
      - "8080:8080"
    command: start-dev
    networks:
      - fiap-network

  # Redis para Rate Limiting
  redis:
    image: redis:latest
    container_name: fiap-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    networks:
      - fiap-network

  # Auth Service
  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    container_name: fiap-auth-service
    restart: unless-stopped
    environment:
      - KEYCLOAK_URL=${KEYCLOAK_URL}
      - KEYCLOAK_REALM=${KEYCLOAK_REALM}
      - KEYCLOAK_CLIENT_ID=${KEYCLOAK_CLIENT_ID}
      - KEYCLOAK_CLIENT_SECRET=${KEYCLOAK_CLIENT_SECRET}
      - MONGODB_URL=${AUTH_MONGODB_URL}
      - MONGODB_DB_NAME=${AUTH_MONGODB_DB_NAME}
      - MONGODB_COLLECTION=${AUTH_MONGODB_COLLECTION}
      - REDIS_URL=${REDIS_URL}
    ports:
      - "8002:8002"
    depends_on:
      - keycloak
      - auth-mongodb
      - redis
    networks:
      - fiap-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Core Service
  core-service:
    build:
      context: ./core-service
      dockerfile: Dockerfile
    container_name: fiap-core-service
    restart: unless-stopped
    environment:
      - MONGODB_URL=${CORE_MONGODB_URL}
      - MONGODB_DB_NAME=${CORE_MONGODB_DB_NAME}
      - MONGODB_COLLECTION=${CORE_MONGODB_COLLECTION}
      - AUTH_SERVICE_URL=${AUTH_SERVICE_URL}
      - REDIS_URL=${REDIS_URL}
    ports:
      - "8000:8000"
    depends_on:
      - core-mongodb
      - auth-service
      - redis
    networks:
      - fiap-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Customer Service
  customer-service:
    build:
      context: ./customer-service
      dockerfile: Dockerfile
    container_name: fiap-customer-service
    restart: unless-stopped
    environment:
      - MONGODB_URL=${CUSTOMER_MONGODB_URL}
      - MONGODB_DB_NAME=${CUSTOMER_MONGODB_DB_NAME}
      - MONGODB_COLLECTION=${CUSTOMER_MONGODB_COLLECTION}
      - AUTH_SERVICE_URL=${AUTH_SERVICE_URL}
      - REDIS_URL=${REDIS_URL}
    ports:
      - "8003:8003"
    depends_on:
      - customer-mongodb
      - auth-service
      - redis
    networks:
      - fiap-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Payment Service
  payment-service:
    build:
      context: ./payment-service
      dockerfile: Dockerfile
    container_name: fiap-payment-service
    restart: unless-stopped
    environment:
      - MONGODB_URL=${PAYMENT_MONGODB_URL}
      - MONGODB_DB_NAME=${PAYMENT_MONGODB_DB_NAME}
      - MONGODB_COLLECTION=${PAYMENT_MONGODB_COLLECTION}
      - AUTH_SERVICE_URL=${AUTH_SERVICE_URL}
      - REDIS_URL=${REDIS_URL}
    ports:
      - "8004:8004"
    depends_on:
      - payment-mongodb
      - auth-service
      - redis
    networks:
      - fiap-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Sales Service
  sales-service:
    build:
      context: ./sales-service
      dockerfile: Dockerfile
    container_name: fiap-sales-service
    restart: unless-stopped
    environment:
      - MONGODB_URL=${SALES_MONGODB_URL}
      - MONGODB_DB_NAME=${SALES_MONGODB_DB_NAME}
      - MONGODB_COLLECTION=${SALES_MONGODB_COLLECTION}
      - CORE_SERVICE_URL=${CORE_SERVICE_URL}
      - AUTH_SERVICE_URL=${AUTH_SERVICE_URL}
      - REDIS_URL=${REDIS_URL}
      - KEYCLOAK_URL=${KEYCLOAK_URL}
      - KEYCLOAK_REALM=${KEYCLOAK_REALM}
      - KEYCLOAK_CLIENT_ID=${KEYCLOAK_CLIENT_ID}
    ports:
      - "8001:8001"
    depends_on:
      - sales-mongodb
      - core-service
      - auth-service
      - redis
    networks:
      - fiap-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: fiap-frontend
    restart: unless-stopped
    environment:
      - REACT_APP_API_URL=${REACT_APP_API_URL}
      - REACT_APP_CORE_SERVICE_URL=${REACT_APP_CORE_SERVICE_URL}
      - REACT_APP_SALES_SERVICE_URL=${REACT_APP_SALES_SERVICE_URL}
      - REACT_APP_AUTH_SERVICE_URL=${REACT_APP_AUTH_SERVICE_URL}
      - REACT_APP_CUSTOMER_SERVICE_URL=${REACT_APP_CUSTOMER_SERVICE_URL}
      - REACT_APP_APP_NAME=${REACT_APP_APP_NAME}
      - REACT_APP_ENABLE_AUTH=${REACT_APP_ENABLE_AUTH}
      - REACT_APP_RETRY_ATTEMPTS=${REACT_APP_RETRY_ATTEMPTS}
      - REACT_APP_RETRY_DELAY=${REACT_APP_RETRY_DELAY}
      - CHOKIDAR_USEPOLLING=${CHOKIDAR_USEPOLLING}
    ports:
      - "3000:3000"
    depends_on:
      - auth-service
      - core-service
      - sales-service
      - customer-service
    networks:
      - fiap-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: fiap-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - auth-service
      - core-service
      - customer-service
      - payment-service
      - sales-service
    networks:
      - fiap-network

volumes:
  auth-mongodb-data:
  core-mongodb-data:
  sales-mongodb-data:
  customer-mongodb-data:
  payment-mongodb-data:
  redis-data:

networks:
  fiap-network:
    driver: bridge 