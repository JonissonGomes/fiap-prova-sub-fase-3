#!/bin/bash

# Script para popular dados similares a dados reais
# Executa o script Python de popula√ß√£o de dados dentro do Docker

set -e

echo "üöÄ Iniciando popula√ß√£o de dados..."

# Verifica se o Docker est√° dispon√≠vel
if ! command -v docker &> /dev/null; then
    echo "‚ùå Docker n√£o encontrado. Instale o Docker para continuar."
    exit 1
fi

# Verifica se o docker-compose est√° dispon√≠vel
if ! command -v docker-compose &> /dev/null; then
    echo "‚ùå docker-compose n√£o encontrado. Instale o docker-compose para continuar."
    exit 1
fi

# Verifica se os servi√ßos est√£o rodando
echo "üîç Verificando se os servi√ßos est√£o rodando..."

services=("auth:8002" "core:8000" "sales:8001" "customer:8003")
all_running=true

for service in "${services[@]}"; do
    IFS=':' read -r name port <<< "$service"
    if curl -s -f "http://localhost:${port}/health" > /dev/null 2>&1; then
        echo "‚úÖ ${name^^} Service: OK"
    else
        echo "‚ùå ${name^^} Service: NOT RUNNING"
        all_running=false
    fi
done

if [ "$all_running" = false ]; then
    echo ""
    echo "‚ùå Alguns servi√ßos n√£o est√£o rodando. Execute 'make up' primeiro."
    echo "   Ou execute 'docker-compose up -d' para iniciar todos os servi√ßos."
    exit 1
fi

echo ""
echo "üéØ Todos os servi√ßos est√£o funcionando. Iniciando popula√ß√£o..."
echo ""

# Copia o script Python para o container e executa
echo "üê≥ Executando script de popula√ß√£o dentro do container..."
docker-compose exec -T auth-service bash -c "
    # Instala depend√™ncias necess√°rias no container
    pip install httpx --quiet
    
    # Cria o script Python tempor√°rio
    cat > /tmp/populate_data.py << 'EOF'
$(cat "$(dirname "$0")/populate-data.py")
EOF
    
    # Executa o script
    cd /app && python3 /tmp/populate_data.py
    
    # Remove o arquivo tempor√°rio
    rm -f /tmp/populate_data.py
"

echo ""
echo "‚úÖ Popula√ß√£o de dados conclu√≠da!"
echo ""
echo "‚ö†Ô∏è  PROBLEMA CONHECIDO: Sistema de autentica√ß√£o"
echo "   O sistema atual requer autentica√ß√£o para criar dados."
echo "   O usu√°rio admin deve ser criado manualmente no Keycloak."
echo ""
echo "üîß SOLU√á√ÉO TEMPOR√ÅRIA:"
echo "   1. Acesse o Keycloak: http://localhost:8080/admin"
echo "   2. Login: admin / admin123"
echo "   3. V√° para Users > Add User"
echo "   4. Crie um usu√°rio com email: admin@vehiclesales.com"
echo "   5. Defina senha: admin123"
echo "   6. Atribua role: ADMIN"
echo ""
echo "üîó Acesse os servi√ßos:"
echo "   - Frontend: http://localhost:3000"
echo "   - Auth Service: http://localhost:8002"
echo "   - Core Service: http://localhost:8000"
echo "   - Sales Service: http://localhost:8001"
echo "   - Customer Service: http://localhost:8003"
echo ""
echo "üë§ Usu√°rio admin (criar manualmente):"
echo "   - Email: admin@vehiclesales.com"
echo "   - Password: admin123"
echo ""
echo "üß™ Para testar conectividade sem autentica√ß√£o:"
echo "   - Execute: make test-populate-data"
echo "" 

# Script para popular dados similares a dados reais
# Executa o script Python de popula√ß√£o de dados dentro do Docker

set -e

echo "üöÄ Iniciando popula√ß√£o de dados..."

# Verifica se o Docker est√° dispon√≠vel
if ! command -v docker &> /dev/null; then
    echo "‚ùå Docker n√£o encontrado. Instale o Docker para continuar."
    exit 1
fi

# Verifica se o docker-compose est√° dispon√≠vel
if ! command -v docker-compose &> /dev/null; then
    echo "‚ùå docker-compose n√£o encontrado. Instale o docker-compose para continuar."
    exit 1
fi

# Verifica se os servi√ßos est√£o rodando
echo "üîç Verificando se os servi√ßos est√£o rodando..."

services=("auth:8002" "core:8000" "sales:8001" "customer:8003")
all_running=true

for service in "${services[@]}"; do
    IFS=':' read -r name port <<< "$service"
    if curl -s -f "http://localhost:${port}/health" > /dev/null 2>&1; then
        echo "‚úÖ ${name^^} Service: OK"
    else
        echo "‚ùå ${name^^} Service: NOT RUNNING"
        all_running=false
    fi
done

if [ "$all_running" = false ]; then
    echo ""
    echo "‚ùå Alguns servi√ßos n√£o est√£o rodando. Execute 'make up' primeiro."
    echo "   Ou execute 'docker-compose up -d' para iniciar todos os servi√ßos."
    exit 1
fi

echo ""
echo "üéØ Todos os servi√ßos est√£o funcionando. Iniciando popula√ß√£o..."
echo ""

# Copia o script Python para o container e executa
echo "üê≥ Executando script de popula√ß√£o dentro do container..."
docker-compose exec -T auth-service bash -c "
    # Instala depend√™ncias necess√°rias no container
    pip install httpx --quiet
    
    # Cria o script Python tempor√°rio
    cat > /tmp/populate_data.py << 'EOF'
$(cat "$(dirname "$0")/populate-data.py")
EOF
    
    # Executa o script
    cd /app && python3 /tmp/populate_data.py
    
    # Remove o arquivo tempor√°rio
    rm -f /tmp/populate_data.py
"

echo ""
echo "‚úÖ Popula√ß√£o de dados conclu√≠da!"
echo ""
echo "‚ö†Ô∏è  PROBLEMA CONHECIDO: Sistema de autentica√ß√£o"
echo "   O sistema atual requer autentica√ß√£o para criar dados."
echo "   O usu√°rio admin deve ser criado manualmente no Keycloak."
echo ""
echo "üîß SOLU√á√ÉO TEMPOR√ÅRIA:"
echo "   1. Acesse o Keycloak: http://localhost:8080/admin"
echo "   2. Login: admin / admin123"
echo "   3. V√° para Users > Add User"
echo "   4. Crie um usu√°rio com email: admin@vehiclesales.com"
echo "   5. Defina senha: admin123"
echo "   6. Atribua role: ADMIN"
echo ""
echo "üîó Acesse os servi√ßos:"
echo "   - Frontend: http://localhost:3000"
echo "   - Auth Service: http://localhost:8002"
echo "   - Core Service: http://localhost:8000"
echo "   - Sales Service: http://localhost:8001"
echo "   - Customer Service: http://localhost:8003"
echo ""
echo "üë§ Usu√°rio admin (criar manualmente):"
echo "   - Email: admin@vehiclesales.com"
echo "   - Password: admin123"
echo ""
echo "üß™ Para testar conectividade sem autentica√ß√£o:"
echo "   - Execute: make test-populate-data"
echo "" 

# Script para popular dados similares a dados reais
# Executa o script Python de popula√ß√£o de dados dentro do Docker

set -e

echo "üöÄ Iniciando popula√ß√£o de dados..."

# Verifica se o Docker est√° dispon√≠vel
if ! command -v docker &> /dev/null; then
    echo "‚ùå Docker n√£o encontrado. Instale o Docker para continuar."
    exit 1
fi

# Verifica se o docker-compose est√° dispon√≠vel
if ! command -v docker-compose &> /dev/null; then
    echo "‚ùå docker-compose n√£o encontrado. Instale o docker-compose para continuar."
    exit 1
fi

# Verifica se os servi√ßos est√£o rodando
echo "üîç Verificando se os servi√ßos est√£o rodando..."

services=("auth:8002" "core:8000" "sales:8001" "customer:8003")
all_running=true

for service in "${services[@]}"; do
    IFS=':' read -r name port <<< "$service"
    if curl -s -f "http://localhost:${port}/health" > /dev/null 2>&1; then
        echo "‚úÖ ${name^^} Service: OK"
    else
        echo "‚ùå ${name^^} Service: NOT RUNNING"
        all_running=false
    fi
done

if [ "$all_running" = false ]; then
    echo ""
    echo "‚ùå Alguns servi√ßos n√£o est√£o rodando. Execute 'make up' primeiro."
    echo "   Ou execute 'docker-compose up -d' para iniciar todos os servi√ßos."
    exit 1
fi

echo ""
echo "üéØ Todos os servi√ßos est√£o funcionando. Iniciando popula√ß√£o..."
echo ""

# Copia o script Python para o container e executa
echo "üê≥ Executando script de popula√ß√£o dentro do container..."
docker-compose exec -T auth-service bash -c "
    # Instala depend√™ncias necess√°rias no container
    pip install httpx --quiet
    
    # Cria o script Python tempor√°rio
    cat > /tmp/populate_data.py << 'EOF'
$(cat "$(dirname "$0")/populate-data.py")
EOF
    
    # Executa o script
    cd /app && python3 /tmp/populate_data.py
    
    # Remove o arquivo tempor√°rio
    rm -f /tmp/populate_data.py
"

echo ""
echo "‚úÖ Popula√ß√£o de dados conclu√≠da!"
echo ""
echo "‚ö†Ô∏è  PROBLEMA CONHECIDO: Sistema de autentica√ß√£o"
echo "   O sistema atual requer autentica√ß√£o para criar dados."
echo "   O usu√°rio admin deve ser criado manualmente no Keycloak."
echo ""
echo "üîß SOLU√á√ÉO TEMPOR√ÅRIA:"
echo "   1. Acesse o Keycloak: http://localhost:8080/admin"
echo "   2. Login: admin / admin123"
echo "   3. V√° para Users > Add User"
echo "   4. Crie um usu√°rio com email: admin@vehiclesales.com"
echo "   5. Defina senha: admin123"
echo "   6. Atribua role: ADMIN"
echo ""
echo "üîó Acesse os servi√ßos:"
echo "   - Frontend: http://localhost:3000"
echo "   - Auth Service: http://localhost:8002"
echo "   - Core Service: http://localhost:8000"
echo "   - Sales Service: http://localhost:8001"
echo "   - Customer Service: http://localhost:8003"
echo ""
echo "üë§ Usu√°rio admin (criar manualmente):"
echo "   - Email: admin@vehiclesales.com"
echo "   - Password: admin123"
echo ""
echo "üß™ Para testar conectividade sem autentica√ß√£o:"
echo "   - Execute: make test-populate-data"
echo "" 

# Script para popular dados similares a dados reais
# Executa o script Python de popula√ß√£o de dados dentro do Docker

set -e

echo "üöÄ Iniciando popula√ß√£o de dados..."

# Verifica se o Docker est√° dispon√≠vel
if ! command -v docker &> /dev/null; then
    echo "‚ùå Docker n√£o encontrado. Instale o Docker para continuar."
    exit 1
fi

# Verifica se o docker-compose est√° dispon√≠vel
if ! command -v docker-compose &> /dev/null; then
    echo "‚ùå docker-compose n√£o encontrado. Instale o docker-compose para continuar."
    exit 1
fi

# Verifica se os servi√ßos est√£o rodando
echo "üîç Verificando se os servi√ßos est√£o rodando..."

services=("auth:8002" "core:8000" "sales:8001" "customer:8003")
all_running=true

for service in "${services[@]}"; do
    IFS=':' read -r name port <<< "$service"
    if curl -s -f "http://localhost:${port}/health" > /dev/null 2>&1; then
        echo "‚úÖ ${name^^} Service: OK"
    else
        echo "‚ùå ${name^^} Service: NOT RUNNING"
        all_running=false
    fi
done

if [ "$all_running" = false ]; then
    echo ""
    echo "‚ùå Alguns servi√ßos n√£o est√£o rodando. Execute 'make up' primeiro."
    echo "   Ou execute 'docker-compose up -d' para iniciar todos os servi√ßos."
    exit 1
fi

echo ""
echo "üéØ Todos os servi√ßos est√£o funcionando. Iniciando popula√ß√£o..."
echo ""

# Copia o script Python para o container e executa
echo "üê≥ Executando script de popula√ß√£o dentro do container..."
docker-compose exec -T auth-service bash -c "
    # Instala depend√™ncias necess√°rias no container
    pip install httpx --quiet
    
    # Cria o script Python tempor√°rio
    cat > /tmp/populate_data.py << 'EOF'
$(cat "$(dirname "$0")/populate-data.py")
EOF
    
    # Executa o script
    cd /app && python3 /tmp/populate_data.py
    
    # Remove o arquivo tempor√°rio
    rm -f /tmp/populate_data.py
"

echo ""
echo "‚úÖ Popula√ß√£o de dados conclu√≠da!"
echo ""
echo "‚ö†Ô∏è  PROBLEMA CONHECIDO: Sistema de autentica√ß√£o"
echo "   O sistema atual requer autentica√ß√£o para criar dados."
echo "   O usu√°rio admin deve ser criado manualmente no Keycloak."
echo ""
echo "üîß SOLU√á√ÉO TEMPOR√ÅRIA:"
echo "   1. Acesse o Keycloak: http://localhost:8080/admin"
echo "   2. Login: admin / admin123"
echo "   3. V√° para Users > Add User"
echo "   4. Crie um usu√°rio com email: admin@vehiclesales.com"
echo "   5. Defina senha: admin123"
echo "   6. Atribua role: ADMIN"
echo ""
echo "üîó Acesse os servi√ßos:"
echo "   - Frontend: http://localhost:3000"
echo "   - Auth Service: http://localhost:8002"
echo "   - Core Service: http://localhost:8000"
echo "   - Sales Service: http://localhost:8001"
echo "   - Customer Service: http://localhost:8003"
echo ""
echo "üë§ Usu√°rio admin (criar manualmente):"
echo "   - Email: admin@vehiclesales.com"
echo "   - Password: admin123"
echo ""
echo "üß™ Para testar conectividade sem autentica√ß√£o:"
echo "   - Execute: make test-populate-data"
echo "" 

# Script para popular dados similares a dados reais
# Executa o script Python de popula√ß√£o de dados dentro do Docker

set -e

echo "üöÄ Iniciando popula√ß√£o de dados..."

# Verifica se o Docker est√° dispon√≠vel
if ! command -v docker &> /dev/null; then
    echo "‚ùå Docker n√£o encontrado. Instale o Docker para continuar."
    exit 1
fi

# Verifica se o docker-compose est√° dispon√≠vel
if ! command -v docker-compose &> /dev/null; then
    echo "‚ùå docker-compose n√£o encontrado. Instale o docker-compose para continuar."
    exit 1
fi

# Verifica se os servi√ßos est√£o rodando
echo "üîç Verificando se os servi√ßos est√£o rodando..."

services=("auth:8002" "core:8000" "sales:8001" "customer:8003")
all_running=true

for service in "${services[@]}"; do
    IFS=':' read -r name port <<< "$service"
    if curl -s -f "http://localhost:${port}/health" > /dev/null 2>&1; then
        echo "‚úÖ ${name^^} Service: OK"
    else
        echo "‚ùå ${name^^} Service: NOT RUNNING"
        all_running=false
    fi
done

if [ "$all_running" = false ]; then
    echo ""
    echo "‚ùå Alguns servi√ßos n√£o est√£o rodando. Execute 'make up' primeiro."
    echo "   Ou execute 'docker-compose up -d' para iniciar todos os servi√ßos."
    exit 1
fi

echo ""
echo "üéØ Todos os servi√ßos est√£o funcionando. Iniciando popula√ß√£o..."
echo ""

# Copia o script Python para o container e executa
echo "üê≥ Executando script de popula√ß√£o dentro do container..."
docker-compose exec -T auth-service bash -c "
    # Instala depend√™ncias necess√°rias no container
    pip install httpx --quiet
    
    # Cria o script Python tempor√°rio
    cat > /tmp/populate_data.py << 'EOF'
$(cat "$(dirname "$0")/populate-data.py")
EOF
    
    # Executa o script
    cd /app && python3 /tmp/populate_data.py
    
    # Remove o arquivo tempor√°rio
    rm -f /tmp/populate_data.py
"

echo ""
echo "‚úÖ Popula√ß√£o de dados conclu√≠da!"
echo ""
echo "‚ö†Ô∏è  PROBLEMA CONHECIDO: Sistema de autentica√ß√£o"
echo "   O sistema atual requer autentica√ß√£o para criar dados."
echo "   O usu√°rio admin deve ser criado manualmente no Keycloak."
echo ""
echo "üîß SOLU√á√ÉO TEMPOR√ÅRIA:"
echo "   1. Acesse o Keycloak: http://localhost:8080/admin"
echo "   2. Login: admin / admin123"
echo "   3. V√° para Users > Add User"
echo "   4. Crie um usu√°rio com email: admin@vehiclesales.com"
echo "   5. Defina senha: admin123"
echo "   6. Atribua role: ADMIN"
echo ""
echo "üîó Acesse os servi√ßos:"
echo "   - Frontend: http://localhost:3000"
echo "   - Auth Service: http://localhost:8002"
echo "   - Core Service: http://localhost:8000"
echo "   - Sales Service: http://localhost:8001"
echo "   - Customer Service: http://localhost:8003"
echo ""
echo "üë§ Usu√°rio admin (criar manualmente):"
echo "   - Email: admin@vehiclesales.com"
echo "   - Password: admin123"
echo ""
echo "üß™ Para testar conectividade sem autentica√ß√£o:"
echo "   - Execute: make test-populate-data"
echo "" 

# Script para popular dados similares a dados reais
# Executa o script Python de popula√ß√£o de dados dentro do Docker

set -e

echo "üöÄ Iniciando popula√ß√£o de dados..."

# Verifica se o Docker est√° dispon√≠vel
if ! command -v docker &> /dev/null; then
    echo "‚ùå Docker n√£o encontrado. Instale o Docker para continuar."
    exit 1
fi

# Verifica se o docker-compose est√° dispon√≠vel
if ! command -v docker-compose &> /dev/null; then
    echo "‚ùå docker-compose n√£o encontrado. Instale o docker-compose para continuar."
    exit 1
fi

# Verifica se os servi√ßos est√£o rodando
echo "üîç Verificando se os servi√ßos est√£o rodando..."

services=("auth:8002" "core:8000" "sales:8001" "customer:8003")
all_running=true

for service in "${services[@]}"; do
    IFS=':' read -r name port <<< "$service"
    if curl -s -f "http://localhost:${port}/health" > /dev/null 2>&1; then
        echo "‚úÖ ${name^^} Service: OK"
    else
        echo "‚ùå ${name^^} Service: NOT RUNNING"
        all_running=false
    fi
done

if [ "$all_running" = false ]; then
    echo ""
    echo "‚ùå Alguns servi√ßos n√£o est√£o rodando. Execute 'make up' primeiro."
    echo "   Ou execute 'docker-compose up -d' para iniciar todos os servi√ßos."
    exit 1
fi

echo ""
echo "üéØ Todos os servi√ßos est√£o funcionando. Iniciando popula√ß√£o..."
echo ""

# Copia o script Python para o container e executa
echo "üê≥ Executando script de popula√ß√£o dentro do container..."
docker-compose exec -T auth-service bash -c "
    # Instala depend√™ncias necess√°rias no container
    pip install httpx --quiet
    
    # Cria o script Python tempor√°rio
    cat > /tmp/populate_data.py << 'EOF'
$(cat "$(dirname "$0")/populate-data.py")
EOF
    
    # Executa o script
    cd /app && python3 /tmp/populate_data.py
    
    # Remove o arquivo tempor√°rio
    rm -f /tmp/populate_data.py
"

echo ""
echo "‚úÖ Popula√ß√£o de dados conclu√≠da!"
echo ""
echo "‚ö†Ô∏è  PROBLEMA CONHECIDO: Sistema de autentica√ß√£o"
echo "   O sistema atual requer autentica√ß√£o para criar dados."
echo "   O usu√°rio admin deve ser criado manualmente no Keycloak."
echo ""
echo "üîß SOLU√á√ÉO TEMPOR√ÅRIA:"
echo "   1. Acesse o Keycloak: http://localhost:8080/admin"
echo "   2. Login: admin / admin123"
echo "   3. V√° para Users > Add User"
echo "   4. Crie um usu√°rio com email: admin@vehiclesales.com"
echo "   5. Defina senha: admin123"
echo "   6. Atribua role: ADMIN"
echo ""
echo "üîó Acesse os servi√ßos:"
echo "   - Frontend: http://localhost:3000"
echo "   - Auth Service: http://localhost:8002"
echo "   - Core Service: http://localhost:8000"
echo "   - Sales Service: http://localhost:8001"
echo "   - Customer Service: http://localhost:8003"
echo ""
echo "üë§ Usu√°rio admin (criar manualmente):"
echo "   - Email: admin@vehiclesales.com"
echo "   - Password: admin123"
echo ""
echo "üß™ Para testar conectividade sem autentica√ß√£o:"
echo "   - Execute: make test-populate-data"
echo "" 

# Script para popular dados similares a dados reais
# Executa o script Python de popula√ß√£o de dados dentro do Docker

set -e

echo "üöÄ Iniciando popula√ß√£o de dados..."

# Verifica se o Docker est√° dispon√≠vel
if ! command -v docker &> /dev/null; then
    echo "‚ùå Docker n√£o encontrado. Instale o Docker para continuar."
    exit 1
fi

# Verifica se o docker-compose est√° dispon√≠vel
if ! command -v docker-compose &> /dev/null; then
    echo "‚ùå docker-compose n√£o encontrado. Instale o docker-compose para continuar."
    exit 1
fi

# Verifica se os servi√ßos est√£o rodando
echo "üîç Verificando se os servi√ßos est√£o rodando..."

services=("auth:8002" "core:8000" "sales:8001" "customer:8003")
all_running=true

for service in "${services[@]}"; do
    IFS=':' read -r name port <<< "$service"
    if curl -s -f "http://localhost:${port}/health" > /dev/null 2>&1; then
        echo "‚úÖ ${name^^} Service: OK"
    else
        echo "‚ùå ${name^^} Service: NOT RUNNING"
        all_running=false
    fi
done

if [ "$all_running" = false ]; then
    echo ""
    echo "‚ùå Alguns servi√ßos n√£o est√£o rodando. Execute 'make up' primeiro."
    echo "   Ou execute 'docker-compose up -d' para iniciar todos os servi√ßos."
    exit 1
fi

echo ""
echo "üéØ Todos os servi√ßos est√£o funcionando. Iniciando popula√ß√£o..."
echo ""

# Copia o script Python para o container e executa
echo "üê≥ Executando script de popula√ß√£o dentro do container..."
docker-compose exec -T auth-service bash -c "
    # Instala depend√™ncias necess√°rias no container
    pip install httpx --quiet
    
    # Cria o script Python tempor√°rio
    cat > /tmp/populate_data.py << 'EOF'
$(cat "$(dirname "$0")/populate-data.py")
EOF
    
    # Executa o script
    cd /app && python3 /tmp/populate_data.py
    
    # Remove o arquivo tempor√°rio
    rm -f /tmp/populate_data.py
"

echo ""
echo "‚úÖ Popula√ß√£o de dados conclu√≠da!"
echo ""
echo "‚ö†Ô∏è  PROBLEMA CONHECIDO: Sistema de autentica√ß√£o"
echo "   O sistema atual requer autentica√ß√£o para criar dados."
echo "   O usu√°rio admin deve ser criado manualmente no Keycloak."
echo ""
echo "üîß SOLU√á√ÉO TEMPOR√ÅRIA:"
echo "   1. Acesse o Keycloak: http://localhost:8080/admin"
echo "   2. Login: admin / admin123"
echo "   3. V√° para Users > Add User"
echo "   4. Crie um usu√°rio com email: admin@vehiclesales.com"
echo "   5. Defina senha: admin123"
echo "   6. Atribua role: ADMIN"
echo ""
echo "üîó Acesse os servi√ßos:"
echo "   - Frontend: http://localhost:3000"
echo "   - Auth Service: http://localhost:8002"
echo "   - Core Service: http://localhost:8000"
echo "   - Sales Service: http://localhost:8001"
echo "   - Customer Service: http://localhost:8003"
echo ""
echo "üë§ Usu√°rio admin (criar manualmente):"
echo "   - Email: admin@vehiclesales.com"
echo "   - Password: admin123"
echo ""
echo "üß™ Para testar conectividade sem autentica√ß√£o:"
echo "   - Execute: make test-populate-data"
echo "" 

# Script para popular dados similares a dados reais
# Executa o script Python de popula√ß√£o de dados dentro do Docker

set -e

echo "üöÄ Iniciando popula√ß√£o de dados..."

# Verifica se o Docker est√° dispon√≠vel
if ! command -v docker &> /dev/null; then
    echo "‚ùå Docker n√£o encontrado. Instale o Docker para continuar."
    exit 1
fi

# Verifica se o docker-compose est√° dispon√≠vel
if ! command -v docker-compose &> /dev/null; then
    echo "‚ùå docker-compose n√£o encontrado. Instale o docker-compose para continuar."
    exit 1
fi

# Verifica se os servi√ßos est√£o rodando
echo "üîç Verificando se os servi√ßos est√£o rodando..."

services=("auth:8002" "core:8000" "sales:8001" "customer:8003")
all_running=true

for service in "${services[@]}"; do
    IFS=':' read -r name port <<< "$service"
    if curl -s -f "http://localhost:${port}/health" > /dev/null 2>&1; then
        echo "‚úÖ ${name^^} Service: OK"
    else
        echo "‚ùå ${name^^} Service: NOT RUNNING"
        all_running=false
    fi
done

if [ "$all_running" = false ]; then
    echo ""
    echo "‚ùå Alguns servi√ßos n√£o est√£o rodando. Execute 'make up' primeiro."
    echo "   Ou execute 'docker-compose up -d' para iniciar todos os servi√ßos."
    exit 1
fi

echo ""
echo "üéØ Todos os servi√ßos est√£o funcionando. Iniciando popula√ß√£o..."
echo ""

# Copia o script Python para o container e executa
echo "üê≥ Executando script de popula√ß√£o dentro do container..."
docker-compose exec -T auth-service bash -c "
    # Instala depend√™ncias necess√°rias no container
    pip install httpx --quiet
    
    # Cria o script Python tempor√°rio
    cat > /tmp/populate_data.py << 'EOF'
$(cat "$(dirname "$0")/populate-data.py")
EOF
    
    # Executa o script
    cd /app && python3 /tmp/populate_data.py
    
    # Remove o arquivo tempor√°rio
    rm -f /tmp/populate_data.py
"

echo ""
echo "‚úÖ Popula√ß√£o de dados conclu√≠da!"
echo ""
echo "‚ö†Ô∏è  PROBLEMA CONHECIDO: Sistema de autentica√ß√£o"
echo "   O sistema atual requer autentica√ß√£o para criar dados."
echo "   O usu√°rio admin deve ser criado manualmente no Keycloak."
echo ""
echo "üîß SOLU√á√ÉO TEMPOR√ÅRIA:"
echo "   1. Acesse o Keycloak: http://localhost:8080/admin"
echo "   2. Login: admin / admin123"
echo "   3. V√° para Users > Add User"
echo "   4. Crie um usu√°rio com email: admin@vehiclesales.com"
echo "   5. Defina senha: admin123"
echo "   6. Atribua role: ADMIN"
echo ""
echo "üîó Acesse os servi√ßos:"
echo "   - Frontend: http://localhost:3000"
echo "   - Auth Service: http://localhost:8002"
echo "   - Core Service: http://localhost:8000"
echo "   - Sales Service: http://localhost:8001"
echo "   - Customer Service: http://localhost:8003"
echo ""
echo "üë§ Usu√°rio admin (criar manualmente):"
echo "   - Email: admin@vehiclesales.com"
echo "   - Password: admin123"
echo ""
echo "üß™ Para testar conectividade sem autentica√ß√£o:"
echo "   - Execute: make test-populate-data"
echo "" 